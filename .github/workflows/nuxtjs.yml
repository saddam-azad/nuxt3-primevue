# Sample workflow for building and deploying a Nuxt site to GitHub Pages
#
# To get started with Nuxt see: https://nuxtjs.org/docs/get-started/installation
#
name: Deploy Nuxt site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

  #     - name: Detect package manager
  #       id: detect-package-manager
  #       run: |
  #         if [ -f "${{ github.workspace }}/yarn.lock" ]; then
  #           echo "manager=yarn" >> $GITHUB_OUTPUT
  #           echo "command=install" >> $GITHUB_OUTPUT
  #           exit 0
  #         elif [ -f "${{ github.workspace }}/package.json" ]; then
  #           echo "manager=npm" >> $GITHUB_OUTPUT
  #           echo "command=ci" >> $GITHUB_OUTPUT
  #           exit 0
  #         else
  #           echo "Unable to determine packager manager"
  #           exit 1
  #         fi

  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "16"
  #         cache: ${{ steps.detect-package-manager.outputs.manager }}

  #     - name: Restore cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           dist
  #           .nuxt
  #         key: ${{ runner.os }}-nuxt-build-${{ hashFiles('dist') }}
  #         restore-keys: |
  #           ${{ runner.os }}-nuxt-build-

  #     - name: Install dependencies
  #       run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

  #     - name: Build
  #       run: ${{ steps.detect-package-manager.outputs.manager }} run build

  # Deployment job
  deploy:
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: public.ecr.aws/v1a1m6x9/nuxt3
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true